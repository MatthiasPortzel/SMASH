:root {
    --monospaced: ui-monospace, "Cascadia Code", "Source Code Pro", Menlo, Consolas, "DejaVu Sans Mono", monospace;
    --font-size: 14px; /* Don't go higher by default */

    /* The padding around the outside of the main scrollback/text area.
    All text needs to be inset from the sides of the viewport by this amount. */
    --main-padding: 10px;

    --accent: #eed49f; /* Catppuccin Macchiato Yellow */
    --background: #24273a; /* Catppuccin Macchiato Base */
    --command-input-background: rgb(47.62, 51.04, 71.09); /* 7% text, on top of base; rgb(36 * 0.93 + 0.07 * 202, 39 * 0.93 + 0.07 * 211, 58 * 0.93 + 0.07 * 245) */
    --text: #cad3f5; /* Catppuccin Macchiato Text */
}

*, ::before, ::after {
    box-sizing: border-box;
}

html {
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;

    /*  Don't let the content scroll-bounce and show the background */
    /*  Needed here because this will scroll-bounce if all the content fits on the page  */
    overscroll-behavior: none;

    /*  apple.com does it. We want antialiased if devicePixelRatio is 2x, I don't know why that's not the default. TODO: JS to turn this off if devicePixelRatio isn't 2. */
    -webkit-font-smoothing: antialiased;
}

body {
    background: var(--background);
    height: 100%;
    width: 100%;
    margin: 0;
    position: absolute;

    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    padding: 0;

    color: var(--text);
    font-family: var(--monospaced);
    font-size: var(--font-size);
    font-weight: 500;
}

#content {
    width: 100%;
    height: 100%;

    overflow: scroll;

    /*  Don't let the content scroll-bounce and show the background */
    overscroll-behavior: none;
}

#scrollback {
    display: block;
/*    overflow: scroll;*/

    margin: 0;
    padding: 0;

    /* <start> / <end> */
    grid-column: prompt / padding-right;
    grid-row: scrollback / prompt-command;

    /* This is how we're doing scroll-past-end.
    So that's the whole viewport - one line - a couple px padding*/
/*    padding-bottom: calc(100vh - var(--font-size) - var(--main-padding));*/
}

/* also .process-output */
#scrollback pre {
    margin: 0;
    white-space: pre-wrap;
    font-family: var(--monospaced);
    /*  Left and right 10px, top and bottom, 0  */
    padding: 0 var(--main-padding);
    line-height: 1.5;
}

/* This comment is probably out of date. */
/* The prompt has three parts, the left color block, the bottom color block, and then the wrapper. I don't know if there's a better way to do this with `grid`. I want the padding to be the same here and on the scrollback so I'd rather have the padding defined by the grid than push the prompt wrapper to the edges of the screen in order to have the prompt color blocks inside the prompt wrapper. */
/*.prompt-color {
    background: var(--accent);
}*/

.sidebar-overflow-span {
    position: absolute;
    width: 100px;
    align-self: strech; /* Fill to 100% height */
}


/* Wraps the prompt, the command input, the last-output-buttons, and the status bar */
#command {
    position: sticky;
    bottom: 0;
    width: 100%;
    /*  Allow overscroll by the entire amount - the height of the prompt
    /*  We will need JS to dynamically update this if the prompt changes height
    /*  But it's better than pulling in JS to do the entire position of the element like I thought I was going to have to */
    margin-bottom: calc(100vh - 31px);
}

#prompt {
    display: flex;
    flex-direction: column;
    padding: 0;
}

/* Wraps the prompt and the command text */
.prompt-line {
    background: var(--command-input-background);

    display: flex;
    flex-direction: row;
    align-items: stretch;
}

.prompt {
    color: black;

    display: flex;
    align-items: center;
}

.prompt .prompt-text {
    align-self: stretch;
    padding: 3px;
    padding-left: var(--main-padding);

    display: flex;
    align-items: center;
}
.prompt.active .prompt-text {
    background: var(--accent);
    /*  TODO: variable for color which is text on accent  */
    color: black;
}
.prompt:not(.active) .prompt-text {
    color: var(--text);
    border-top: 2px solid var(--accent);
    border-bottom: 2px solid var(--accent);
}



.prompt span {
    /*padding-top: 5px;*/
    /*padding-bottom: 5px;   */
}



/*#prompt-color-left {
    grid-column: 1 / prompt;
    grid-row: prompt-command / padding-bottom;
}
#prompt-color-bottom {
    grid-column: 1 / -1;
    grid-row: padding-bottom / end;
}*/

#triangle {
/*    display: inline-block;*/
/*    width: 25px;*/
    align-self: stretch;
}
.prompt.active #triangle {
    background: var(--accent);
}
.prompt:not(.active) {
    background: transparent;
}
.prompt.docked #triangle {
    width: 2em;
}
.prompt:not(.docked) #triangle {
    width: 1em;
}

/*.prompt #triangle path {
    vector-effect: non-scaling-stroke;
}*/
.prompt.active #triangle path {
    fill: var(--command-input-background);
}
.prompt:not(.active) #triangle {
    /*  Hack to align the SVG triangle line with the border  */
    position: relative;
    left: -1px;
}
.prompt:not(.active) #triangle path {
    fill: transparent;
    stroke: var(--accent);
    stroke-width: 2px;
}

.command-text {
    display: flex;
    align-items: center;

    padding-left: 3px;
}

#command-input {
    padding-top: 5px;
    padding-bottom: 5px;

    grid-column: command / padding-right;
    grid-row: prompt-command / padding-bottom;

    outline: none;
    caret-color: var(--accent);

    /*  Otherwise when it has no content, the width is 0 and the cursor doesn't render, even if it's focused  */
    flex-grow: 1;
}
